{
    "contents" : "library(ggplot2)\n\nplate_key_file_path = \"key.tab\"\nplate_OD600_file_path = \"OD600.tab\"\nplate_RFS_file_path = \"RFS.tab\"\nplate_GFS_file_path = \"GFS.tab\" \n\n##ggplot2 defaults\ntheme_set(theme_bw(base_size = 24))\ntheme_update(panel.border=element_rect(color=\"black\", fill=NA, size=1), legend.key=element_rect(color=NA, fill=NA))\nline_thickness = 0.8\n\n#################################\n\nkey.table = read.table(plate_key_file_path, header=T)\nOD600.table = read.table(plate_OD600_file_path, header=F, row.names=1 )\nRFS.table = read.table(plate_RFS_file_path, header=F, row.names=1)\nGFS.table = read.table(plate_GFS_file_path, header=F, row.names=1)\n\n#this makes a list of all levels that are not none in AA\naa.list = levels(droplevels(subset(key.table, AA != \"none\")$AA))\n\n\nfor(this.aa in aa.list) {\n  \n  mega.table = data.frame()\n  \n  \n  #Find the wells that are just amino acid and LB\n  background.wells = subset(key.table, (AA==this.aa) & (aaRS==\"none\") )\n\n  #How many clones?\n  clone.list = levels(droplevels(subset(key.table, (AA==this.aa) & (clone != \"none\"))$clone))\n\n  for(this.clone in clone.list) {\n  \n    pFRYC.wells = subset(key.table, (AA==this.aa) & (clone==this.clone) & (aaRS!=\"none\") & (plasmid==\"pFRYC\"))\n    pFRY.wells = subset(key.table, (AA==this.aa) & (clone==this.clone) & (aaRS!=\"none\") & (plasmid==\"pFRY\"))\n    \n    # note: this code will die if there are not exactly the right\n    # number of wells for pFRYC, pFRY, and the background\n    this.bg.OD600.table = OD600.table[as.character(background.wells$well),]\n    this.bg.GFS.table = GFS.table[as.character(background.wells$well),]\n    this.bg.RFS.table = RFS.table[as.character(background.wells$well),]\n    \n    this.pFRYC.OD600.table = OD600.table[as.character(pFRYC.wells$well),]\n    this.pFRYC.GFS.table = GFS.table[as.character(pFRYC.wells$well),]\n    this.pFRYC.RFS.table = RFS.table[as.character(pFRYC.wells$well),]\n    \n    this.pFRY.OD600.table = OD600.table[as.character(pFRY.wells$well),]\n    this.pFRY.RFS.table = RFS.table[as.character(pFRY.wells$well),]\n    this.pFRY.GFS.table = GFS.table[as.character(pFRY.wells$well),]    \n    \n    #create new mega.table rows for all signals minus background\n    for (i in 1:nrow(this.bg.OD600.table)) {\n    \n      for (j in 1:ncol(OD600.table)) {\n      \n        new.row = data.frame(\n          aa = this.aa,\n          clone = this.clone,\n          replicate = i,\n          time=OD600.table[\"Time\",j],\n          OD600.bg = this.bg.OD600.table[i,j],\n          GFS.bg = this.bg.GFS.table[i,j],\n          RFS.bg = this.bg.RFS.table[i,j],\n          OD600.pFRYC = this.pFRYC.OD600.table[i,j],\n          RFS.pFRYC = this.pFRYC.RFS.table[i,j],\n          GFS.pFRYC = this.pFRYC.GFS.table[i,j],\n          OD600.pFRY = this.pFRY.OD600.table[i,j],\n          RFS.pFRY = this.pFRY.RFS.table[i,j],\n          GFS.pFRY = this.pFRY.GFS.table[i,j]\n        )\n      \n        mega.table = rbind(mega.table, new.row)\n      }\n    }\n  }\n  \n  #normalize\n  \n  ### ADD CODE HERE\n  \n  #mainly for debugging\n  write.csv(mega.table, paste(this.aa, \"_mega_table.csv\", sep=\"\"))\n         \n  mega.table$replicate = factor(mega.table$replicate)\n  mega.table$clone_replicate = paste(mega.table$clone, mega.table$replicate, sep=\"_\")\n  \n  p = ggplot(mega.table, aes(x=time, y=OD600.pFRYC, color=clone, linetype=replicate))\n  p + geom_line(shape=0, size=line_thickness) + coord_cartesian()\n  ggsave(filename=file.path(paste(this.aa, \".pdf\", sep=\"\")))\n}\n\n\n\n",
    "created" : 1430861683709.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2211387077",
    "id" : "B79A5E50",
    "lastKnownWriteTime" : 1430790962,
    "path" : "~/barricklab/ncAA_growth_curve_analysis.R",
    "project_path" : "ncAA_growth_curve_analysis.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}